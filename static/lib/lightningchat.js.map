{"version":3,"sources":["../src/lightningchat.js"],"names":["socket_io","require","keypair","rsa","$","App","config","serverAddress","bits","serverPublicKey","socket","_initializeSocket","ready","serverReady","self","on","key","_devLog","emit","public","message","private","JSON","parse","decrypt","stringify","encrypt","msg","append","Date","getTime","window","LightningChat"],"mappings":";;;;;;AAAA,IAAIA,YAAeC,QAAQ,kBAAR,CAAnB;AACA,IAAIC,UAAeD,QAAQ,SAAR,CAAnB;AACA,IAAIE,MAAeF,QAAQ,UAAR,CAAnB;AACA,IAAIG,IAAeH,QAAQ,QAAR,CAAnB;;IAEMI,G;AACF,iBAAYC,MAAZ,EAAmB;AAAA;;AACf,aAAKC,aAAL,GAAqBD,OAAOC,aAA5B;AACA,aAAKL,OAAL,GAAeA,QAAQ,EAAEM,MAAM,IAAR,EAAR,CAAf;AACA,aAAKC,eAAL,GAAuB,IAAvB;AACA,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,iBAAL;AACA,aAAKC,KAAL,GAAa,KAAb;AACA,aAAKC,WAAL,GAAmB,KAAnB;AACH;;;;4CAEkB;AACf,iBAAKH,MAAL,GAAcV,UAAU,KAAKO,aAAf,CAAd;AACA,gBAAIO,OAAO,IAAX;AACA;AACA,iBAAKJ,MAAL,CAAYK,EAAZ,CAAe,YAAf,EAA6B,UAACC,GAAD,EAAS;AAClCF,qBAAKL,eAAL,GAAuBO,GAAvB;AACAF,qBAAKG,OAAL,CAAa,gCAAgC,OAAhC,GAA0CH,KAAKL,eAA/C,GAAiE,QAA9E;AACA;AACAK,qBAAKF,KAAL,GAAa,IAAb;AACAE,qBAAKJ,MAAL,CAAYQ,IAAZ,CAAiB,OAAjB,EAA0B,EAA1B;AACAJ,qBAAKG,OAAL,CAAa,qBAAb;AACH,aAPD;AAQA,iBAAKP,MAAL,CAAYK,EAAZ,CAAe,SAAf,EAA0B,YAAM;AAC5BD,qBAAKJ,MAAL,CAAYQ,IAAZ,CAAiB,YAAjB,EAA+BJ,KAAKZ,OAAL,CAAaiB,MAA5C;AACAL,qBAAKG,OAAL,CAAa,mCAAmC,OAAnC,GAA6CH,KAAKZ,OAAL,CAAaiB,MAA1D,GAAmE,QAAhF;AACH,aAHD;AAIA,iBAAKT,MAAL,CAAYK,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC3BD,qBAAKD,WAAL,GAAmB,IAAnB;AACAC,qBAAKG,OAAL,CAAa,qBAAb;AACF,aAHD;;AAKA,iBAAKP,MAAL,CAAYK,EAAZ,CAAe,SAAf,EAA0B,UAACK,OAAD,EAAa;AACnCN,qBAAKG,OAAL,CAAa,gCAAgCG,OAA7C;AACA,oBAAIJ,MAAM,IAAIb,GAAJ,CAAQW,KAAKZ,OAAL,CAAamB,OAArB,CAAV;AACAD,0BAAUE,KAAKC,KAAL,CAAWP,IAAIQ,OAAJ,CAAYJ,OAAZ,CAAX,CAAV;AACAN,qBAAKG,OAAL,CAAa,uBAAuBK,KAAKG,SAAL,CAAeL,OAAf,CAApC;AACH,aALD;AAMH;;;oCAEWA,O,EAAQ;AAChB,gBAAG,KAAKP,WAAL,IAAoB,KAAKD,KAA5B,EAAkC;AAC9BQ,0BAAUE,KAAKG,SAAL,CAAeL,OAAf,CAAV;AACA,oBAAIJ,MAAM,IAAIb,GAAJ,CAAQ,KAAKM,eAAb,CAAV;AACA,qBAAKC,MAAL,CAAYQ,IAAZ,CAAiB,SAAjB,EAA4BF,IAAIU,OAAJ,CAAYN,OAAZ,EAAqB,QAArB,CAA5B;AACA,qBAAKH,OAAL,CAAa,6BAA6BD,IAAIU,OAAJ,CAAY,MAAZ,EAAoB,QAApB,CAA1C;AACH,aALD,MAKO;AACH,qBAAKT,OAAL,CAAa,sBAAb;AACH;AACJ;;;gCAEOU,G,EAAI;AACRvB,cAAE,yBAAF,EAA6BwB,MAA7B,CAAoC,gBAAe,IAAIC,IAAJ,GAAWC,OAAX,EAAf,GAAsC,SAAtC,GAAkDH,GAAlD,GAAwD,QAA5F;AACH;;;;;;AAILI,OAAOC,aAAP,GAAuB3B,GAAvB","file":"lightningchat.js","sourcesContent":["var socket_io    = require('socket.io-client');\r\nvar keypair      = require('keypair');\r\nvar rsa          = require('node-rsa');\r\nvar $            = require('jquery');\r\n\r\nclass App {\r\n    constructor(config){\r\n        this.serverAddress = config.serverAddress;\r\n        this.keypair = keypair({ bits: 1024 });\r\n        this.serverPublicKey = null;\r\n        this.socket = null;\r\n        this._initializeSocket();\r\n        this.ready = false;\r\n        this.serverReady = false;\r\n    }\r\n\r\n    _initializeSocket(){\r\n        this.socket = socket_io(this.serverAddress);\r\n        var self = this;\r\n        // Key transmission\r\n        this.socket.on('public key', (key) => {\r\n            self.serverPublicKey = key;\r\n            self._devLog(\"Server public key received \" + \"<pre>\" + self.serverPublicKey + \"</pre>\");\r\n            // We are ready\r\n            self.ready = true;\r\n            self.socket.emit('ready', {});\r\n            self._devLog(\"Client is ready ...\");\r\n        });\r\n        this.socket.on('connect', () => {\r\n            self.socket.emit('public key', self.keypair.public);\r\n            self._devLog(\"Client public key transmitted \" + \"<pre>\" + self.keypair.public + \"</pre>\");\r\n        });\r\n        this.socket.on('ready', () => {\r\n           self.serverReady = true;\r\n           self._devLog(\"Server is ready ...\");\r\n        });\r\n\r\n        this.socket.on('message', (message) => {\r\n            self._devLog(\"Encrypted message received \" + message);\r\n            var key = new rsa(self.keypair.private);\r\n            message = JSON.parse(key.decrypt(message));\r\n            self._devLog(\"Message decrypted \" + JSON.stringify(message));\r\n        });\r\n    }\r\n\r\n    sendMessage(message){\r\n        if(this.serverReady && this.ready){\r\n            message = JSON.stringify(message);\r\n            var key = new rsa(this.serverPublicKey);\r\n            this.socket.emit('message', key.encrypt(message, 'base64'));\r\n            this._devLog(\"Encrypted message sent: \" + key.encrypt(\"test\", 'base64'));\r\n        } else {\r\n            this._devLog(\"App is not ready yet\");\r\n        }\r\n    }\r\n\r\n    _devLog(msg){\r\n        $(\"#lightning-chat-dev-log\").append(\"<div><span>\"+ new Date().getTime() + \"</span>\" + msg + \"</div>\");\r\n    }\r\n\r\n}\r\n\r\nwindow.LightningChat = App;"]}